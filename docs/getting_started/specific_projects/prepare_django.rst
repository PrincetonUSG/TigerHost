.. _prepare_django:

========================
Prepare a Django Project
========================

This section goes over how to prepare a django project for use with TigerHost.

If you don't already have a django project, but wants to follow along, you can clone the sample repo:

.. code-block:: console

    $ git clone https://github.com/naphatkrit/sample-django
    $ cd sample-django

If you choose to do this *and want to be able to test the
project locally*, then you might also want to install the python dependencies that come with the project:

.. code-block:: console

    $ pip install -r requirements.txt

.. _prepare_django__git:

Git
---

You need to be using git to version control your project in order to use
TigerHost. If you are already using git (or are using the sample repo),
you can skip this section.

First, initialize the git repo:

.. code-block:: console

    $ cd /path/to/your/project
    $ git init

You will want to gitignore some compiled files before checking in your
project. In your project folder, create a file called ``.gitignore`` in
your favorite text editor. Add the following lines:

.. code-block:: none

    *.pyc
    .DS_Store

Add any more paths that you want to be excluded from version control.
Save the file.

Next, you can check in your project.

.. code-block:: console

    $ git add .
    $ git commit -m "initial commit"


.. _prepare_django__virtualenv:

Virtualenv
----------

It is highly recommended that you use virtualenv, which helps you keep
your python dependencies for different projects distinct.

.. code-block:: console

    $ pip install virtualenv virtualenvwrapper

To create a virtual environment for your project:

.. code-block:: console

    $ mkvirtualenv <virtualenv_name>

This automatically activates the new virtualenv. Now install any
requirements that your project has.

To switch to another virtualenv:

.. code-block:: console

    $ workon <virtualenv_name>

.. _prepare_django__requirements:

Requirements.txt
----------------

To use TigerHost, you should keep your python dependencies in a file
called ``requirements.txt`` . If you are using the sample repo, this is
already set up for you, but you should still read this section.

First, create the file ``requirements.txt`` by running:

.. code-block:: console

    $ cd /path/to/your/project
    $ pip freeze > requirements.txt

This should be done every time you install a new python package.

Next, check this file into your repository:

.. code-block:: console

    $ git add requirements.txt
    $ git commit -m "Added requirements.txt"

Whenever someone gets a copy of your project, they can install the
requirements by running:

.. code-block:: console

    $ pip install -r requirements.txt

.. _prepare_django__procfile:

Procfile
--------

TigerHost requires a Procfile. This is a file that lists all the types of
processes needed to run your application. Create a new file ``Procfile`` at the root of your project and open it up in your favorite text editor. Add the following:

.. code-block:: none

    web: gunicorn myproject.wsgi --log-file -

Replace ``myproject`` with your actual project name. Check that the corresponding subfolder already have a file named ``wsgi.py`` . This is automatically generated by Django. If not, create one with the following content:

.. code-block:: python

    import os
    from django.core.wsgi import get_wsgi_application


    os.environ.setdefault("DJANGO_SETTINGS_MODULE",
                          "myproject.settings")  # TODO replace this with your actual settings file

    application = get_wsgi_application()

The Procfile declares a type of process, ``web`` , which is started by
running the shell command ``gunicorn myproject.wsgi --log-file -`` .

You will also want to install ``gunicorn`` , which is a simple HTTP
server written in Python, similar to Apache, but simpler to configure.

.. code-block:: console

    $ pip install gunicorn

Don’t forget to update your requirements.txt file accordingly.

.. code-block:: console

    $ pip freeze > requirements.txt
    $ git add Procfile requirements.txt
    $ git commit -m "Added Procfile"

Secret Key
----------

Django relies on a secret, exposed in ``settings.py``. The best practice
is to store this value in an environmental variable and NOT check it
into your repo.

Update your ``settings.py``.

.. code-block:: python

    SECRET_KEY = os.environ.get('SECRET_KEY', 'default, insecure key, used only in dev')

Remember to check in your change.

.. code-block:: console

    $ git add .
    $ git commit -m "get secret from environment"

Database Configuration
----------------------

On TigerHost, just like Heroku, sensitive credentials are stored as
config variables. The database connection information is stored as the
variable ``DATABASE_URL`` . The
package `dj-database-url <https://warehouse.python.org/project/dj-database-url/>`__
parses this information into the format that Django wants.

.. code-block:: console

    $ pip install dj-database-url
    $ pip freeze > requirements.txt

Then update your ``settings.py`` .

.. code-block:: python

    # Update database configuration with $DATABASE_URL.
    import dj_database_url
    db_from_env = dj_database_url.config()
    DATABASES['default'].update(db_from_env)

Don’t forget to check everything into the repository.

.. code-block:: console

    $ git add .
    $ git commit -m "configured database"

Static Files
------------

TODO, for now, follow this `Heroku
guide <https://devcenter.heroku.com/articles/django-app-configuration#migrating-an-existing-django-project>`__.

After Deploy
------------

You will want to do the following after deploying your code. For instructions on how to deploy, see :ref:`deploy_app`.

Addons
=======
You will want to add two addons: ``secret`` and ``postgres``. These will store the appropriate values into the ``SECRET`` and ``DATABASE_URL`` environmental variables that we referenced earlier. For instructions on how to do this, see :ref:`addons`.

Migrate Your Database
=======================
You can migrate your database as a one-off command. See :ref:`run_commands`.
