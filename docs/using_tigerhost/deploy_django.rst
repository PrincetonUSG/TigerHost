========================
Deploy a Django Project
========================

Prereqs
=======

CLI Client
----------

First, install the client. See +Installing the CLI Client

Django
------

If you already have a Django project, you can skip this section.
Otherwise, if you just want to see how TigerHost works, you can clone
the sample repo:

.. code-block:: console

    $ git clone https://github.com/naphatkrit/sample-django
    $ cd sample-django

**Note:** If you choose to do this *and want to be able to test the
project locally*, then you might also want to install the python
dependencies that come with the project:

.. code-block:: console

    $ pip install -r requirements.txt

Preparing Your Project
======================

If you are already using Heroku, you can skip this section. TigerHost is
fully compatible with Heroku.

Git
---

You need to be using git to version control your project in order to use
TigerHost. If you are already using git (or are using the sample repo),
you can skip this section.

First, initialize the git repo:

.. code-block:: console

    $ cd /path/to/your/project
    $ git init

You will want to gitignore some compiled files before checking in your
project. In your project folder, create a file called ``.gitignore`` in
your favorite text editor. Add the following lines:

.. code-block:: none

    *.pyc
    .DS_Store

Add any more paths that you want to be excluded from version control.
Save the file.

Next, you can check in your project.

.. code-block:: console

    $ git add .
    $ git commit -m "initial commit"

Virtualenv
----------

It is highly recommended that you use virtualenv, which helps you keep
your python dependencies for different projects distinct.

.. code-block:: console

    $ pip install virtualenv virtualenvwrapper

To create a virtual environment for your project:

.. code-block:: console

    $ mkvirtualenv <virtualenv_name>

This automatically activates the new virtualenv. Now install any
requirements that your project has.

To switch to another virtualenv:

.. code-block:: console

    $ workon <virtualenv_name>

Requirements.txt
----------------

To use TigerHost, you should keep your python dependencies in a file
called ``requirements.txt`` . If you are using the sample repo, this is
already set up for you, but you should still read this section.

First, create the file ``requirements.txt`` by running:

.. code-block:: console

    $ cd /path/to/your/project
    $ pip freeze > requirements.txt

This should be done every time you install a new python package.

Next, check this file into your repository:

.. code-block:: console

    $ git add requirements.txt
    $ git commit -m "Added requirements.txt"

Whenever someone gets a copy of your project, they can install the
requirements by running:

.. code-block:: console

    $ pip install -r requirements.txt

Procfile
--------

TigerHost requires a Procfile. This is a file that lists all the
processes needed to run your application. Typically, you will just have
one process: the web process. If you are already using Heroku, then you
should already have a Procfile, and it is completely compatible with
TigerHost. If not, create a new file ``Procfile`` at the root of your
project and open it up in your favorite text editor. Add the following:

.. code-block:: none

    web: gunicorn myproject.wsgi --log-file -

Replace ``myproject`` with your actual project name. The corresponding
subfolder should already have a file named ``wsgi.py`` . This is
automatically generated by Django.

This Procfile declares a type of process, ``web`` , which is started by
running the shell command ``gunicorn myproject.wsgi --log-file -`` .

You will also want to install ``gunicorn`` , which is a simple HTTP
server written in Python, similar to Apache, but simpler to configure.

.. code-block:: console

    $ pip install gunicorn

Don’t forget to update your requirements.txt file accordingly.

.. code-block:: console

    $ pip freeze > requirements.txt
    $ git add Procfile requirements.txt
    $ git commit -m "Added Procfile"

Secret Key
----------

Django relies on a secret, exposed in ``settings.py``. The best practice
is to store this value in an environmental variable and NOT check it
into your repo.

Update your ``settings.py``.

.. code-block:: python

    SECRET_KEY = os.environ.get('SECRET_KEY', 'default, insecure key, used only in dev')

Remember to check in your change.

.. code-block:: console

    $ git add .
    $ git commit -m "get secret from environment"

Database Configuration
----------------------

On TigerHost, just like Heroku, sensitive credentials are stored as
config variables. The database connection information is stored as the
variable ``DATABASE_URL`` . The
package\ `dj-database-url <https://warehouse.python.org/project/dj-database-url/>`__
parses this information into the format that Django wants.

.. code-block:: console

    $ pip install dj-database-url
    $ pip freeze > requirements.txt

Then update your ``settings.py`` .

.. code-block:: python

    # Update database configuration with $DATABASE_URL.
    import dj_database_url
    db_from_env = dj_database_url.config()
    DATABASES['default'].update(db_from_env)

Don’t forget to check everything into the repository.

.. code-block:: console

    $ git add .
    $ git commit -m "configured database"

Static Files
------------

TODO, for now, follow this `Heroku
guide <https://devcenter.heroku.com/articles/django-app-configuration#migrating-an-existing-django-project>`__.

Deploying on TigerHost
======================

Create an Application
---------------------

Inside your repo, run:

.. code-block:: console

    $ tigerhost create <app_name>

This will also create a new git remote named ``tigerhost`` . This is how
TigerHost keeps track of which app your repo corresponds to. Note that
for any TigerHost commands, you can override this and explicitly specify
which app to use with ``--app <app_name>`` or ``-a <app_name>``.

Provision a Secret Addon
------------------------

Django relies on a secret, which TigerHost can generate for you. Just
run:

.. code-block:: console

    $ tigerhost addons:create secret

Provision a Database Addon
--------------------------

We recommend using postgres for your database. This way, your
application will be compatible with Heroku in case you ever want to move
there. TigerHost provides a database service as an addon.

.. code-block:: console

    $ tigerhost addons:create postgres

This creates a new addon for the postgres service, and will store the
database URL into the environment as ``DATABASE_URL``. You can see the
list of installed addons with:

.. code-block:: console

    $ tigerhost addons

It can take a while for your postgres addon to become available. You can
run the following command, which blocks until your database becomes
available for use.

.. code-block:: console

    $ tigerhost addons:wait <addon_name>

Deploy
------

In TigerHost, you deploy with a git push.

.. code-block:: console

    $ git push tigerhost

Your app will be available at ``<app_name>.tigerhostapp.com``.

Migrate Your Database
---------------------

You can migrate your database by running one-off commands on your
deployed app. Note that if you run other commands, make sure that it is
not an interactive command, because TigerHost (unlike Heroku) cannot
handle that right now.

.. code-block:: console

    $ tigerhost run python manage.py migrate
